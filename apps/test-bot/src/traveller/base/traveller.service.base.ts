/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Traveller } from "@prisma/client";

export class TravellerServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.TravellerCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.TravellerCountArgs>
  ): Promise<number> {
    return this.prisma.traveller.count(args);
  }

  async travellers<T extends Prisma.TravellerFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.TravellerFindManyArgs>
  ): Promise<Traveller[]> {
    return this.prisma.traveller.findMany(args);
  }
  async traveller<T extends Prisma.TravellerFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.TravellerFindUniqueArgs>
  ): Promise<Traveller | null> {
    return this.prisma.traveller.findUnique(args);
  }
  async createTraveller<T extends Prisma.TravellerCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TravellerCreateArgs>
  ): Promise<Traveller> {
    return this.prisma.traveller.create<T>(args);
  }
  async updateTraveller<T extends Prisma.TravellerUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.TravellerUpdateArgs>
  ): Promise<Traveller> {
    return this.prisma.traveller.update<T>(args);
  }
  async deleteTraveller<T extends Prisma.TravellerDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.TravellerDeleteArgs>
  ): Promise<Traveller> {
    return this.prisma.traveller.delete(args);
  }
}
