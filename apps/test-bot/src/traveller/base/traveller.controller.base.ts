/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TravellerService } from "../traveller.service";
import { TravellerCreateInput } from "./TravellerCreateInput";
import { Traveller } from "./Traveller";
import { TravellerFindManyArgs } from "./TravellerFindManyArgs";
import { TravellerWhereUniqueInput } from "./TravellerWhereUniqueInput";
import { TravellerUpdateInput } from "./TravellerUpdateInput";

export class TravellerControllerBase {
  constructor(protected readonly service: TravellerService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Traveller })
  async createTraveller(
    @common.Body() data: TravellerCreateInput
  ): Promise<Traveller> {
    return await this.service.createTraveller({
      data: data,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Traveller] })
  @ApiNestedQuery(TravellerFindManyArgs)
  async travellers(@common.Req() request: Request): Promise<Traveller[]> {
    const args = plainToClass(TravellerFindManyArgs, request.query);
    return this.service.travellers({
      ...args,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Traveller })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async traveller(
    @common.Param() params: TravellerWhereUniqueInput
  ): Promise<Traveller | null> {
    const result = await this.service.traveller({
      where: params,
      select: {
        createdAt: true,
        email: true,
        firstName: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Traveller })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTraveller(
    @common.Param() params: TravellerWhereUniqueInput,
    @common.Body() data: TravellerUpdateInput
  ): Promise<Traveller | null> {
    try {
      return await this.service.updateTraveller({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Traveller })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTraveller(
    @common.Param() params: TravellerWhereUniqueInput
  ): Promise<Traveller | null> {
    try {
      return await this.service.deleteTraveller({
        where: params,
        select: {
          createdAt: true,
          email: true,
          firstName: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
